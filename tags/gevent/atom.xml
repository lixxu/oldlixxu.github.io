<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: gevent | 杂七杂八记一下]]></title>
  <link href="http://lixxu.me/tags/gevent/atom.xml" rel="self"/>
  <link href="http://lixxu.me/"/>
  <updated>2014-07-28T23:49:47+08:00</updated>
  <id>http://lixxu.me/</id>
  <author>
    <name><![CDATA[Lix Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flask-script 和 gevent 结合使用]]></title>
    <link href="http://lixxu.me/blog/2014/06/10/use-gevent-with-flask-script/"/>
    <updated>2014-06-10T15:09:51+08:00</updated>
    <id>http://lixxu.me/blog/2014/06/10/use-gevent-with-flask-script</id>
    <content type="html"><![CDATA[<p>之前一直没用过 <code>flask-script</code>, 可是看了很多其他人的例子都在用这么个玩意. 碰巧手上有个现在做的一个应用, 所以打算用一下.</p>

<p>用了之后出现问题了: <code>python manage.py runserver</code> 使用的是默认的 <code>wsgi 服务器</code>, 而我在 windows 下一直使用 <code>gevent</code> 调试的.
看了下文档, 差不多就是这样:
{% codeblock manage.py lang:python mark:40-53 %}</p>

<h1>!/usr/bin/env python</h1>

<h1>-<em>- coding: utf-8 -</em>-</h1>

<p>from <strong>future</strong> import unicode_literals
import os
import os.path</p>

<p>from app import create_app, db
from app.models import User
from flask.ext.script import Manager, Shell
from flask.ext.migrate import Migrate, MigrateCommand</p>

<p>if os.path.isfile(&lsquo;app.env&rsquo;):
    # print(&lsquo;importing environment from app.env&hellip;&rsquo;)
    with open(&lsquo;app.env&rsquo;) as f:
        for line in f:
            if not line.lstrip().startswith(&lsquo;#&rsquo;) and &lsquo;=&rsquo; in line:
                items = line.strip().split(&lsquo;=&rsquo;, 1)
                os.environ[str(items[0].strip())] = str(items[1].strip())</p>

<p>app = create_app(os.getenv(&lsquo;APP_ENV&rsquo;) or &lsquo;default&rsquo;)
manager = Manager(app)
migrate = Migrate(app, db)</p>

<p>def make_shell_context():
    return dict(app=app, db=db, User=User)</p>

<p>manager.add_command(&lsquo;shell&rsquo;, Shell(make_context=make_shell_context))
manager.add_command(&lsquo;db&rsquo;, MigrateCommand)</p>

<p>@manager.command
def deploy():
    from flask.ext.migrate import upgrade</p>

<pre><code>upgrade()
</code></pre>

<p>@manager.command
def rungevent():
    import werkzeug.serving
    from werkzeug.debug import DebuggedApplication
    from gevent.wsgi import WSGIServer</p>

<pre><code>@werkzeug.serving.run_with_reloader
def run():
    app.debug = True
    dapp = DebuggedApplication(app, evalex=True)
    ws = WSGIServer(('', 5000), dapp)
    ws.serve_forever()

run()
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:
    manager.run()</p>

<p>{% endcodeblock %}</p>

<p>然后使用下面的命令就可以了:
<code>bash
python manage.py rungevent
</code></p>

<p>可是在 <code>rungevent</code> 里, 无论怎么传参数控制是否处在 <code>debug</code> 状态, 始终是 <code>autoreload</code>, 这可能是 <code>app.env</code> 里我设定了开发模式导致的.</p>

<p>不过, 算了, 生产环境我是用 <code>uwsgi</code> 的, 用不到这个玩意.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[reload flask with gevent]]></title>
    <link href="http://lixxu.me/blog/2014/02/24/reload-flask-with-gevent/"/>
    <updated>2014-02-24T13:06:22+08:00</updated>
    <id>http://lixxu.me/blog/2014/02/24/reload-flask-with-gevent</id>
    <content type="html"><![CDATA[<p>越来越感觉 Windows 下 <code>flask</code> 自带的 debug server 慢了, 于是就开始寻找替换工具,
先是看了 <code>gunicorn</code>, 但是在 Windows 下有问题. 再接着试了 <code>gevent</code>, 可以跑起来,
但是有个问题, 丰富的 debug 信息看不到了, 只提示 <code>internal server error</code>.
这显然不行, 放狗一搜, 下面就是结果:</p>

<pre><code class="python">#!/usr/bin/env python
#-*- coding: utf-8 -*-

import werkzeug.serving
from werkzeug.debug import DebuggedApplication
from gevent.wsgi import WSGIServer
from myapp import app


@werkzeug.serving.run_with_reloader
def run():
    app.debug = True
    app = DebuggedApplication(app, evalex=True)
    ws = WSGIServer(('', 5000), app)
    ws.serve_forever()

if __name__ == '__main__':
    run()
</code></pre>
]]></content>
  </entry>
  
</feed>
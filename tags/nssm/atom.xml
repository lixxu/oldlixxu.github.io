<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: NSSM | 杂七杂八记一下]]></title>
  <link href="http://lixxu.me/tags/nssm/atom.xml" rel="self"/>
  <link href="http://lixxu.me/"/>
  <updated>2014-07-28T23:49:47+08:00</updated>
  <id>http://lixxu.me/</id>
  <author>
    <name><![CDATA[Lix Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 NSSM 安装 Windows 系统服务]]></title>
    <link href="http://lixxu.me/blog/2014/06/22/nssm-install-windows-service/"/>
    <updated>2014-06-22T16:15:55+08:00</updated>
    <id>http://lixxu.me/blog/2014/06/22/nssm-install-windows-service</id>
    <content type="html"><![CDATA[<p>工厂里的某些测试电脑存在时间不对的问题, 最开始使用简单的批处理加上
<a href="http://nssm.cc/">nssm</a> 安装成 service 的方式, 比如下面的示例:</p>

<p>{% codeblock sync_time.bat %}
sync_time:
net time \a.b.c.d /set /y</p>

<p>sleep 3600
goto sync_time</p>

<p>{% endcodeblock %}</p>

<p>但在使用的过程中出现了这个 service 吃掉许多 CPU 的问题.
按道理说在 sleep 后应该会进入休眠状态, 不应该再占用 CPU.
不清楚什么原因, 就使用 <code>Python</code> 重写了.</p>

<!--more-->


<p>1. 主程序 <code>main.py</code></p>

<p>{% codeblock main.py lang:python %}</p>

<h1>!/usr/bin/env python</h1>

<h1>-<em>- coding: utf-8 -</em>-</h1>

<p>from <strong>future</strong> import unicode_literals
import subprocess
import time
import click</p>

<p><strong>version</strong> = &lsquo;0.1&rsquo;
DEFAULT_SERVERS = &lsquo;server_a,server_b&rsquo;
IP_MAPS = dict(server_a=&lsquo;a.b.c.d&rsquo;, server_b=&lsquo;a.b.c.e&rsquo;)
CMD = r&#8217;net time \{} /set /y&#8217;</p>

<p>def run_cmd(server):
    status = subprocess.call(CMD.format(server))
    if status == 0:
        return True</p>

<pre><code>ip = IP_MAPS.get(server)
if ip:
    return subprocess.call(CMD.format(ip), shell=True) == 0

return False
</code></pre>

<p>@click.command()
@click.option(&lsquo;&ndash;servers&rsquo;, default=DEFAULT_SERVERS,
              help=&lsquo;servers name or IP list, seperated by &ldquo;,&rdquo;&rsquo;)
@click.option(&lsquo;&ndash;sleep&rsquo;, default=600,
              help=&lsquo;sleep seconds till next run, default is 600s (10 minutes)&rsquo;)
def sync_time(servers, sleep):
    while 1:
        for server in servers.split(&lsquo;,&rsquo;):
            if run_cmd(server.strip()):
                break</p>

<pre><code>    time.sleep(sleep)
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:
    sync_time()</p>

<p>{% endcodeblock %}</p>

<p>2. 使用 <code>py2exe</code> 或其他工具打包 <code>main.py</code> 为可执行文件, 比如 <code>SyncTimer.exe</code></p>

<p>3. 然后是安装/删除 service 的批处理:</p>

<p>3.1 <code>install.bat</code>
{% codeblock install.bat %}
@echo off
set service=SyncTimer
echo %PROCESSOR_ARCHITECTURE% | find /i &ldquo;x86&rdquo; > nul
if %errorlevel%==0 (
    set nssm=nssm32.exe
) else (
    set nssm=nssm64.exe
)</p>

<p>%nssm% install &ldquo;%service%&rdquo; &ldquo;%~dp0SyncTimer.exe&rdquo;</p>

<p>net start %service%</p>

<p>sleep 5
{% endcodeblock %}</p>

<p>3.2 <code>remove.bat</code>
{% codeblock remove.bat %}
@echo off
set exename=SyncTimer
net stop %exename%</p>

<p>echo %PROCESSOR_ARCHITECTURE% | find /i &ldquo;x86&rdquo; > nul
if %errorlevel%==0 (
    set nssm=nssm32.exe
) else (
    set nssm=nssm64.exe
)</p>

<p>%nssm% remove &ldquo;%exename%&rdquo; confirm
sleep 5
{% endcodeblock %}</p>

<p>当然了, 你需要到 <a href="http://nssm.cc/download">http://nssm.cc/download</a> 下载 <code>nssm</code> 的执行程序.
分别把 32 位和 64 位的执行文件和你的 EXE 文件放到一起, 并改名为 <code>nssm32.exe</code> 和 <code>nssm64.exe</code>. 在安装 service 后也不能删除这些文件, 因为 service 关联的程序是 <code>nssm</code>.</p>

<p>这里有个注意的地方:
<code>nssm</code> 的文档上说使用命令行安装时如果不想弹出确认对话框, 可以写成这样的:
<code>
%nssm% install "%service%" "%~dp0SyncTimer.exe" confirm
</code>
但是这样安装的 service 始终处于 <code>paused</code> 状态, 一度让我以为是程序里 <code>sleep</code> 导致的. 但在使用对话框安装时却一点问题都没有.
后来看了下系统日志, 发现是路径的问题. 后面就使用 exe 的绝对路径并且把后面的 <code>confirm</code> 给去掉了才算正常.</p>

<p>本来打算写如何使用 <code>Python</code> 设置系统时间的怎么变成 <code>nssm</code> 了?</p>

<!--more-->

]]></content>
  </entry>
  
</feed>
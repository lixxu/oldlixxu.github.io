<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 杂七杂八记一下]]></title>
  <link href="http://lixxu.me/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://lixxu.me/"/>
  <updated>2014-02-24T13:22:24+08:00</updated>
  <id>http://lixxu.me/</id>
  <author>
    <name><![CDATA[Lix Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reload Flask With Gevent]]></title>
    <link href="http://lixxu.me/blog/2014/02/24/reload-flask-with-gevent/"/>
    <updated>2014-02-24T13:06:22+08:00</updated>
    <id>http://lixxu.me/blog/2014/02/24/reload-flask-with-gevent</id>
    <content type="html"><![CDATA[<p>越来越感觉 Windows 下 <code>flask</code> 自带的 debug server 慢了, 于是就开始寻找替换工具,
先是看了 <code>gunicorn</code>, 但是在 Windows 下有问题. 再接着试了 <code>gevent</code>, 可以跑起来,
但是有个问题, 丰富的 debug 信息看不到了, 只提示 <code>internal server error</code>.
这显然不行, 放狗一搜, 下面就是结果:</p>

<p>```python</p>

<h1>!/usr/bin/env python</h1>

<h1>&ndash;<em>&ndash; coding: utf-8 &ndash;</em>&ndash;</h1>

<p>import werkzeug.serving
from werkzeug.debug import DebuggedApplication
from gevent.wsgi import WSGIServer
from myapp import app</p>

<p>@werkzeug.serving.run_with_reloader
def run():</p>

<pre><code>app.debug = True
app = DebuggedApplication(app, evalex=True)
ws = WSGIServer(('', 5000), app)
ws.serve_forever()
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>run()
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows下彩色化终端文字]]></title>
    <link href="http://lixxu.me/blog/2014/01/15/windows-color-terminal/"/>
    <updated>2014-01-15T08:48:35+08:00</updated>
    <id>http://lixxu.me/blog/2014/01/15/windows-color-terminal</id>
    <content type="html"><![CDATA[<p>最近有在 Windows 命令行程序下打印彩色文字的需要, 放了半天狗, 试了几个包, 都不是很满意, 最后还是使用决定 <code>ctypes</code>.</p>

<p>先看下例子 (超过 15 好像就是背景色了):
<img src="/images/color_terminal.png"></p>

<!--more-->


<p>具体用法(Python 2.7.6下):
```python color_terminal_test.py</p>

<h1>!/usr/bin/env python</h1>

<h1>&ndash;<em>&ndash; coding: utf-8 &ndash;</em>&ndash;</h1>

<p>from <strong>future</strong> import unicode_literals, print_function
from ctypes import windll, c_ulong</p>

<p>HANDLER = windll.Kernel32.GetStdHandle(c_ulong(0xfffffff5))
COLOR_MAPS = dict(black=0, dark_blue=1, dark_green=2,</p>

<pre><code>dark_navy=3, dark_red=4, dark_purple=5,
dark_yellow=6, dark_white=7, gray=8,
blue=9, green=10, navy=11,
red=12, purple=13, yellow=14,
white=15, default=7,
)
</code></pre>

<p>def set_color(color=&lsquo;default&rsquo;):</p>

<pre><code>windll.Kernel32.SetConsoleTextAttribute(HANDLER,
    COLOR_MAPS.get(color, 7))
</code></pre>

<p>def show_text(text, color=&lsquo;default&rsquo;, new_line=True):</p>

<pre><code>set_color(color)
print('{}{}'.format(text, '\n' if new_line else ''), end='')
set_color()
</code></pre>

<p>show_text(&lsquo;yellow&rsquo;, color=&lsquo;yellow&rsquo;)
```</p>

<p><code>COLOR_MAPS</code> 里多了一个 <code>default</code>, 这个就是默认终端下的文字颜色.</p>

<!--more-->

]]></content>
  </entry>
  
</feed>
